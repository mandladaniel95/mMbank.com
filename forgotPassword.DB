const express = require('express');
const app = express();
const mongoose = require('mongoose');
const nodemailer = require('nodemailer');

mongoose.connect('mongodb://localhost/users', { useNewUrlParser: true, useUnifiedTopology: true });

const userSchema = new mongoose.Schema({
  email: String,
  password: String,
  resetToken: String,
});

const User = mongoose.model('User', userSchema);

app.post('/forget-password', async (req, res) => {
  try {
    const email = req.body.email;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    const resetToken = Math.random().toString(36).substr(2, 10);
    user.resetToken = resetToken;
    await user.save();

    const transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      auth: {
        user: 'your-email@gmail.com',
        pass: 'your-password',
      },
    });

    const mailOptions = {
      from: 'your-email@gmail.com',
      to: email,
      subject: 'Password Reset Link',
      text: `http://localhost:3000/reset-password/${resetToken}`,
    };

    await transporter.sendMail(mailOptions);

    res.json({ success: true });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to send password reset link' });
  }
});

app.get('/reset-password/:resetToken', async (req, res) => {
  try {
    const resetToken = req.params.resetToken;
    const user = await User.findOne({ resetToken });

    if (!user) {
      return res.status(404).json({ error: 'Invalid reset token' });
    }

    res.render('reset-password', { resetToken });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to reset password' });
  }
});

app.post('/reset-password', async (req, res) => {
  try {
    const resetToken = req.body.resetToken;
    const newPassword = req.body.newPassword;

    const user = await User.findOne({ resetToken });

    if (!user) {
      return res.status(404).json({ error: 'Invalid reset token' });
    }

    user.password = newPassword;
    user.resetToken = '';
    await user.save();

    res.json({ success: true });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to reset password' });
  }
});

app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
